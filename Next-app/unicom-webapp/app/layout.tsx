"use client"; // This marks the file as a client component

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

import React, { useEffect } from 'react';
import { 
  getIdTokenFromUrl, 
  storeIdToken, 
  getStoredIdToken, 
  isTokenExpired, 
  redirectToLogin 
} from '@/lib/auth';

// Define the type of the `children` prop
interface AuthGuardProps {
  children: React.ReactNode;
}

// AuthGuard component
const AuthGuard: React.FC<AuthGuardProps> = ({ children }) => {
  useEffect(() => {
    const urlToken = getIdTokenFromUrl();
    const storedToken = getStoredIdToken();

    if (urlToken) {
      storeIdToken(urlToken);
      // Clean the URL (remove token from URL after it's been processed)
      const cleanUrl = window.location.origin + window.location.pathname;
      window.history.replaceState({}, document.title, cleanUrl);
    }

    const tokenToUse = urlToken || storedToken;

    // Redirect to login if no valid token or token is expired
    if (!tokenToUse || isTokenExpired(tokenToUse)) {
      redirectToLogin();
    }
  }, []); // Run only once on mount

  return <>{children}</>;
};

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <AuthGuard>{children}</AuthGuard>
      </body>
    </html>
  );
}




// // RootLayout component to include html and body tags
// export default function RootLayout({ children }: { children: React.ReactNode }) {
//   return (
//     <html lang="en"><body><AuthGuard><main>{children}</main></AuthGuard></body></html>
//   );
// }

