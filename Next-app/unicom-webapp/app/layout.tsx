// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }


"use client"; // Ensure this file is treated as a client-side component

import React, { useEffect } from 'react';
import { 
  getIdTokenFromUrl, 
  storeIdToken, 
  getStoredIdToken, 
  isTokenExpired, 
  redirectToLogin 
} from '@/lib/auth';

// Define the type of the `children` prop
interface AuthGuardProps {
  children: React.ReactNode;
}

// AuthGuard component as before
const AuthGuard: React.FC<AuthGuardProps> = ({ children }) => {
  useEffect(() => {
    const urlToken = getIdTokenFromUrl();
    const storedToken = getStoredIdToken();

    if (urlToken) {
      storeIdToken(urlToken);
      // Clean the URL (remove token from URL after it's been processed)
      const cleanUrl = window.location.origin + window.location.pathname;
      window.history.replaceState({}, document.title, cleanUrl);
    }

    const tokenToUse = urlToken || storedToken;

    // Redirect to login if no valid token or token is expired
    if (!tokenToUse || isTokenExpired(tokenToUse)) {
      redirectToLogin();
    }
  }, []); // Empty dependency array, meaning this will run once on mount

  // Return children (protected content) if token is valid
  return <>{children}</>;
};

// RootLayout component to include html and body tags
export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en"> {/* Ensure the html element has a lang attribute */}
      <body>
        {/* Use AuthGuard here to protect routes */}
        <AuthGuard>
          <header>
            {/* Optional: your header content */}
          </header>

          <main>
            {/* Render the protected content */}
            {children}
          </main>

          <footer>
            {/* Optional: your footer content */}
          </footer>
        </AuthGuard>
      </body>
    </html>
  );
}

